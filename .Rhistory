scenario_filter = scenarios[,-c(1:2)]
scenario_filter = data.frame(scenario_filter)
names(scenario_filter ) <- names(scenarios)[-c(1:2)]
end_power_data_tmp = end_power_data[,!names(end_power_data)%in% names(scenario_filter )]
filter_data_df = rbind(filter_data_df,end_power_data_tmp )
}
return(list(filter_list=filter_data_list, filter_df=filter_data_df))
}
Power_curve(path = getwd(),alpha=0.05,data='Exp',par.fix=data.frame(rate1=1),CI=TRUE)
unique_combinations = function(data_gen){
df = All_Neutralised_Scenarios(data_gen)
df = subset(df,select=-id)
df = subset(df,select=-delta)
unique(df)
}
unique_combinations('Exp')
unique_combinations(data='Exp')
All_Neutralised_Scenarios('Exp')
data='Exp'
dir<-dir(paste("Settings/",data,"_settings",sep=""))
file<-paste("Settings/",data,
"_settings.RData",
sep="")
load(file)
settings<-settings[settings$null==0,]
scenarios<-subset(settings,select=-null)
id=c(1:nrow(scenarios))
scenarios<-cbind(id,scenarios)
scenarios
shiny::runApp()
runApp('C:/Users/lucp9827/Desktop/Neutral_artickel_end/Neutralise_end_Dash')
runApp('~/NeutraliseFiles')
runApp('~/NeutraliseFiles')
runApp()
runApp('C:/Users/lucp9827/Desktop/Neutralise_end_Dash - Copy')
runApp('C:/Users/lucp9827/Desktop/Neutralise_end_Dash - Copy')
load("C:/Users/lucp9827/Desktop/Neutralise_end_Dash - Copy/results_typeI_perdatagen.RData")
results=results_datagen_type1
load("C:/Users/lucp9827/Desktop/Neutralise_end_Dash - Copy/results_power_perdatagen.RData")
results_power = results_datagen
alpha=0.05
# which scenarios to filter out?
lowlim = optimise(function(p){(p+sqrt(p*(1-p)/10000)*qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)-alpha)^2}, interval=c(0,1))$minimum
uplim = optimise(function(p){(p-sqrt(p*(1-p)/10000)*qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)-alpha)^2}, interval=c(0,1))$minimum
filter_data_list = list()
filter_data_df = data.frame()
data = names(results_power)
d=Normal
d='Normal'
(d!='Normal2Var')
results_id = results[[d]]
View(results_id)
filter_type1 = function(results,results_power,alpha){
# which scenarios to filter out?
lowlim = optimise(function(p){(p+sqrt(p*(1-p)/10000)*qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)-alpha)^2}, interval=c(0,1))$minimum
uplim = optimise(function(p){(p-sqrt(p*(1-p)/10000)*qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)-alpha)^2}, interval=c(0,1))$minimum
filter_data_list = list()
filter_data_df = data.frame()
data = names(results_power)
for (d in data){
if (d=='Exp'){
results_power[['Exp']][results_power[['Exp']]$rate1==0.12,'rate1']=0.125
}
if (d!='Normal2Var'){
results_id = results[[d]]
}else{
results_id = results[['Normal']]
}
results_tmp=filter_significance(results_id,alpha)
#results_tmp$control= results_tmp$power>=lowlim&results_tmp$power<=uplim
results_tmp$control= results_tmp$power<=uplim
results_tmp[is.na(results_tmp$control),'control']<-FALSE
filter_data = results_tmp[results_tmp$control==FALSE,]
filter_data = subset(filter_data, select=-N)
filter_data = subset(filter_data, select=-seed)
filter_data = subset(filter_data, select=-delta)
filter_data = subset(filter_data, select=-control)
filter_data = subset(filter_data, select=-id)
filter_data = subset(filter_data, select=-power)
filter_data = subset(filter_data, select=-l_CI)
filter_data = subset(filter_data, select=-u_CI)
filter_data = subset(filter_data, select=-mom1_1)
filter_data = subset(filter_data, select=-mom1_2)
filter_data = subset(filter_data, select=-mom2_1)
filter_data = subset(filter_data, select=-mom2_2)
filter_data = subset(filter_data, select=-mom3_1)
filter_data = subset(filter_data, select=-mom3_2)
filter_data = subset(filter_data, select=-mom4_1)
filter_data = subset(filter_data, select=-mom4_2)
filter_data = subset(filter_data, select=-cnt)
methods_test = unique(filter_data$method )
itt=which(colnames(filter_data)=='n2')+1
settng_cols= filter_data[,c(1,itt:(length(filter_data)))]
if(d=='Normal2Var'){
settng_cols=data.frame(method=settng_cols$method,sd1=settng_cols$sd,sd2=settng_cols$sd,n=settng_cols$n)
}
Results_power = results_power[[d]]
Results_power = filter_significance(Results_power,alpha)
Results_power$control=TRUE
for (m in methods_test){
for (i in colnames(settng_cols)[-c(1,length(settng_cols))]){
val =  unique(settng_cols[settng_cols$method==m,c(i,'n')])
for (j in (1:nrow(val))){
n=val[j,'n']
keep =  Results_power[Results_power$method==m&Results_power$n==n,'control']
for (l in (1:length(keep))){
Results_power[Results_power$method==m&Results_power$n==n,'control'][l]= ifelse((( Results_power[Results_power$method==m&Results_power$n==n,c(i)][l]==val[j,1])& Results_power[Results_power$method==m&Results_power$n==n,'control'][l]==TRUE),FALSE,keep[l])
}
}
}
}
end_power_data = Results_power[Results_power$control==TRUE,]
filter_data_list[[d]] = end_power_data
# convert in a data frame
if (d=='Normal2Var'){
scenarios = All_Neutralised_Scenarios(d,type="power")
}else{
scenarios = All_Neutralised_Scenarios(d,type="type1")
}
scenario_filter = scenarios[,-c(1:2)]
scenario_filter = data.frame(scenario_filter)
names(scenario_filter ) <- names(scenarios)[-c(1:2)]
end_power_data_tmp = end_power_data[,!names(end_power_data)%in% names(scenario_filter )]
filter_data_df = rbind(filter_data_df,end_power_data_tmp )
}
return(list(filter_list=filter_data_list, filter_df=filter_data_df))
}
filter_significance = function(results,alpha){
x= colnames(results)
if (alpha==0.05){
x_0.10 = 0.10
colnr = grep(as.numeric(x_0.10 ),x)
results_tmp=results[,-c(colnr)]
x= colnames(results_tmp)
x_0.01 = 0.01
colnr = grep(as.numeric(x_0.01 ),x)
results_tmp=results_tmp[,-c(colnr)]
}
if (alpha==0.01){
x_0.10 = 0.10
colnr = grep(as.numeric(x_0.10 ),x)
results_tmp=results[,-c(colnr)]
x= colnames(results_tmp)
x_0.05 = 0.05
colnr = grep(as.numeric(x_0.05 ),x)
results_tmp=results_tmp[,-c(colnr)]
}
if (alpha==0.10){
x_0.01 = 0.01
colnr = grep(as.numeric(x_0.01 ),x)
results_tmp=results[,-c(colnr)]
x= colnames(results_tmp)
x_0.05 = 0.05
colnr = grep(as.numeric(x_0.05 ),x)
results_tmp=results_tmp[,-c(colnr)]
}
x= colnames(results_tmp)
colnr = grep(as.numeric(alpha),x)
colnames(results_tmp)[colnr]=c("power","l_CI","u_CI","cnt")
return(results_tmp)
}
results_tmp=filter_significance(results_id,alpha)
rm(results_id)
results_tmp$control= results_tmp$power<=uplim
View(results_tmp)
results_tmp[is.na(results_tmp$control),'control']<-FALSE
View(results_tmp)
filter_data = results_tmp[results_tmp$control==FALSE,]
View(filter_data)
filter_data = subset(filter_data, select=-N)
filter_data = subset(filter_data, select=-seed)
filter_data = subset(filter_data, select=-delta)
filter_data = subset(filter_data, select=-control)
filter_data = subset(filter_data, select=-id)
filter_data = subset(filter_data, select=-power)
filter_data = subset(filter_data, select=-l_CI)
filter_data = subset(filter_data, select=-u_CI)
filter_data = subset(filter_data, select=-mom1_1)
filter_data = subset(filter_data, select=-mom1_2)
filter_data = subset(filter_data, select=-mom2_1)
filter_data = subset(filter_data, select=-mom2_2)
filter_data = subset(filter_data, select=-mom3_1)
filter_data = subset(filter_data, select=-mom3_2)
filter_data = subset(filter_data, select=-mom4_1)
filter_data = subset(filter_data, select=-mom4_2)
filter_data = subset(filter_data, select=-cnt)
View(filter_data)
methods_test = unique(filter_data$method )
itt=which(colnames(filter_data)=='n2')+1
settng_cols= filter_data[,c(1,itt:(length(filter_data)))]
Results_power = results_power[[d]]
Results_power = filter_significance(Results_power,alpha)
Results_power$control=TRUE
View(Results_power)
for (m in methods_test){
for (i in colnames(settng_cols)[-c(1,length(settng_cols))]){
val =  unique(settng_cols[settng_cols$method==m,c(i,'n')])
for (j in (1:nrow(val))){
n=val[j,'n']
keep =  Results_power[Results_power$method==m&Results_power$n==n,'control']
for (l in (1:length(keep))){
Results_power[Results_power$method==m&Results_power$n==n,'control'][l]= ifelse((( Results_power[Results_power$method==m&Results_power$n==n,c(i)][l]==val[j,1])& Results_power[Results_power$method==m&Results_power$n==n,'control'][l]==TRUE),FALSE,keep[l])
}
}
}
}
end_power_data = Results_power[Results_power$control==TRUE,]
filter_data_list[[d]] = end_power_data
# convert in a data frame
if (d=='Normal2Var'){
scenarios = All_Neutralised_Scenarios(d,type="power")
}else{
scenarios = All_Neutralised_Scenarios(d,type="type1")
}
All_Neutralised_Scenarios<-function(data, type='power') {
dir<-dir(paste("settings/",data,"_settings",sep=""))
file<-paste("settings/",data,
"_settings.RData",
sep="")
load(file)
if (type=='power'){
settings<-settings[settings$null==0,]
scenarios<-subset(settings,select=-null)
id=c(1:nrow(scenarios))
scenarios<-cbind(id,scenarios)
if(data=='Exp'){
scenarios[scenarios$rate1==0.12,'rate1']=0.125
}
}else{
settings<-settings[settings$null!=0,]
scenarios<-subset(settings,select=-null)
id=c(1:nrow(scenarios))
scenarios<-cbind(id,scenarios)
if(data=='Exp'){
}
}
return(scenarios)
}
lowlim = optimise(function(p){(p+sqrt(p*(1-p)/10000)*qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)-alpha)^2}, interval=c(0,1))$minimum
uplim = optimise(function(p){(p-sqrt(p*(1-p)/10000)*qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)-alpha)^2}, interval=c(0,1))$minimum
filter_data_list = list()
filter_data_df = data.frame()
data = names(results_power)
for (d in data){
if (d=='Exp'){
results_power[['Exp']][results_power[['Exp']]$rate1==0.12,'rate1']=0.125
}
if (d!='Normal2Var'){
results_id = results[[d]]
}else{
results_id = results[['Normal']]
}
results_tmp=filter_significance(results_id,alpha)
rm(results_id)
results_tmp$control= results_tmp$power<=uplim
results_tmp[is.na(results_tmp$control),'control']<-FALSE
filter_data = results_tmp[results_tmp$control==FALSE,]
filter_data = subset(filter_data, select=-N)
filter_data = subset(filter_data, select=-seed)
filter_data = subset(filter_data, select=-delta)
filter_data = subset(filter_data, select=-control)
filter_data = subset(filter_data, select=-id)
filter_data = subset(filter_data, select=-power)
filter_data = subset(filter_data, select=-l_CI)
filter_data = subset(filter_data, select=-u_CI)
filter_data = subset(filter_data, select=-mom1_1)
filter_data = subset(filter_data, select=-mom1_2)
filter_data = subset(filter_data, select=-mom2_1)
filter_data = subset(filter_data, select=-mom2_2)
filter_data = subset(filter_data, select=-mom3_1)
filter_data = subset(filter_data, select=-mom3_2)
filter_data = subset(filter_data, select=-mom4_1)
filter_data = subset(filter_data, select=-mom4_2)
filter_data = subset(filter_data, select=-cnt)
methods_test = unique(filter_data$method )
itt=which(colnames(filter_data)=='n2')+1
settng_cols= filter_data[,c(1,itt:(length(filter_data)))]
if(d=='Normal2Var'){
settng_cols=data.frame(method=settng_cols$method,sd1=settng_cols$sd,sd2=settng_cols$sd,n=settng_cols$n)
}
Results_power = results_power[[d]]
Results_power = filter_significance(Results_power,alpha)
Results_power$control=TRUE
for (m in methods_test){
for (i in colnames(settng_cols)[-c(1,length(settng_cols))]){
val =  unique(settng_cols[settng_cols$method==m,c(i,'n')])
for (j in (1:nrow(val))){
n=val[j,'n']
keep =  Results_power[Results_power$method==m&Results_power$n==n,'control']
for (l in (1:length(keep))){
Results_power[Results_power$method==m&Results_power$n==n,'control'][l]= ifelse((( Results_power[Results_power$method==m&Results_power$n==n,c(i)][l]==val[j,1])& Results_power[Results_power$method==m&Results_power$n==n,'control'][l]==TRUE),FALSE,keep[l])
}
}
}
}
end_power_data = Results_power[Results_power$control==TRUE,]
filter_data_list[[d]] = end_power_data
# convert in a data frame
if (d=='Normal2Var'){
scenarios = All_Neutralised_Scenarios(d,type="power")
}else{
scenarios = All_Neutralised_Scenarios(d,type="type1")
}
scenario_filter = scenarios[,-c(1:2)]
scenario_filter = data.frame(scenario_filter)
names(scenario_filter ) <- names(scenarios)[-c(1:2)]
end_power_data_tmp = end_power_data[,!names(end_power_data)%in% names(scenario_filter )]
filter_data_df = rbind(filter_data_df,end_power_data_tmp )
}
View(filter_data_list)
source("help.R")
View(filter_type1)
load("C:/Users/lucp9827/Desktop/Neutralise_end_Dash - Copy/results_power_perdatagen.RData")
load("C:/Users/lucp9827/Desktop/Neutralise_end_Dash - Copy/results_typeI_perdatagen.RData")
lowlim = optimise(function(p){(p+sqrt(p*(1-p)/10000)*qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)-alpha)^2}, interval=c(0,1))$minimum
alpha=0.05
results=results_datagen_type1
results_datagen_type1
results_power = results_datagen_type1
results_power = results_datagen
lowlim = optimise(function(p){(p+sqrt(p*(1-p)/10000)*qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)-alpha)^2}, interval=c(0,1))$minimum
uplim = optimise(function(p){(p-sqrt(p*(1-p)/10000)*qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)-alpha)^2}, interval=c(0,1))$minimum
filter_data_list = list()
filter_data_df = data.frame()
data = names(results_power)
for (d in data){
if (d=='Exp'){
results_power[['Exp']][results_power[['Exp']]$rate1==0.12,'rate1']=0.125
}
if (d!='Normal2Var'){
results_id = results[[d]]
}else{
results_id = results[['Normal']]
}
results_tmp=filter_significance(results_id,alpha)
rm(results_id)
results_tmp$control= results_tmp$power<=uplim
results_tmp[is.na(results_tmp$control),'control']<-FALSE
filter_data = results_tmp[results_tmp$control==FALSE,]
filter_data = subset(filter_data, select=-N)
filter_data = subset(filter_data, select=-seed)
filter_data = subset(filter_data, select=-delta)
filter_data = subset(filter_data, select=-control)
filter_data = subset(filter_data, select=-id)
filter_data = subset(filter_data, select=-power)
filter_data = subset(filter_data, select=-l_CI)
filter_data = subset(filter_data, select=-u_CI)
filter_data = subset(filter_data, select=-mom1_1)
filter_data = subset(filter_data, select=-mom1_2)
filter_data = subset(filter_data, select=-mom2_1)
filter_data = subset(filter_data, select=-mom2_2)
filter_data = subset(filter_data, select=-mom3_1)
filter_data = subset(filter_data, select=-mom3_2)
filter_data = subset(filter_data, select=-mom4_1)
filter_data = subset(filter_data, select=-mom4_2)
filter_data = subset(filter_data, select=-cnt)
methods_test = unique(filter_data$method )
itt=which(colnames(filter_data)=='n2')+1
settng_cols= filter_data[,c(1,itt:(length(filter_data)))]
if(d=='Normal2Var'){
settng_cols=data.frame(method=settng_cols$method,sd1=settng_cols$sd,sd2=settng_cols$sd,n=settng_cols$n)
}
Results_power = results_power[[d]]
Results_power = filter_significance(Results_power,alpha)
Results_power$control=TRUE
for (m in methods_test){
for (i in colnames(settng_cols)[-c(1,length(settng_cols))]){
val =  unique(settng_cols[settng_cols$method==m,c(i,'n')])
for (j in (1:nrow(val))){
n=val[j,'n']
keep =  Results_power[Results_power$method==m&Results_power$n==n,'control']
for (l in (1:length(keep))){
Results_power[Results_power$method==m&Results_power$n==n,'control'][l]= ifelse((( Results_power[Results_power$method==m&Results_power$n==n,c(i)][l]==val[j,1])& Results_power[Results_power$method==m&Results_power$n==n,'control'][l]==TRUE),FALSE,keep[l])
}
}
}
}
end_power_data = Results_power[Results_power$control==TRUE,]
filter_data_list[[d]] = end_power_data
# convert in a data frame
if (d=='Normal2Var'){
scenarios = All_Neutralised_Scenarios(d,type="power")
}else{
scenarios = All_Neutralised_Scenarios(d,type="type1")
}
scenario_filter = scenarios[,-c(1:2)]
scenario_filter = data.frame(scenario_filter)
names(scenario_filter ) <- names(scenarios)[-c(1:2)]
end_power_data_tmp = end_power_data[,!names(end_power_data)%in% names(scenario_filter )]
filter_data_df = rbind(filter_data_df,end_power_data_tmp )
}
View(filter_data_list)
View(filter_data)
View(filter_data_df)
source("help.R")
alpha=0.1
load("C:/Users/lucp9827/Desktop/Neutralise_end_Dash - Copy/results_power_perdatagen.RData")
results_power=results_datagen
load("C:/Users/lucp9827/Desktop/Neutralise_end_Dash - Copy/results_typeI_perdatagen.RData")
results = results_datagen_type1
filtered_results_0.1 = filter_type1(results,results_power,alpha)
View(filtered_results_0.1)
save(filtered_results_0.1,file="C:\\Users\\lucp9827\\Desktop\\Neutralise_end_Dash - Copy")
save(filtered_results_0.1,file="C:\\Users\\lucp9827\\Desktop\\Neutralise_end_Dash - Copy\\filtered_0.1")
save(filtered_results_0.1,file="C:\\Users\\lucp9827\\Desktop\\Neutralise_end_Dash - Copy\\filtered_0.1.RData")
save(filtered_results_0.1,file="C:\\Users\\lucp9827\\Desktop\\Neutralise_end_Dash - Copy\\filtered_10%.RData")
filtered_results_0.1 = filter_type1(results,results_power,alpha=0.05)
filtered_results_0.05 = filter_type1(results,results_power,alpha=0.05)
save(filtered_results_0.05,file="C:\\Users\\lucp9827\\Desktop\\Neutralise_end_Dash - Copy\\filtered_5%.RData")
save(filtered_results_0.01,file="C:\\Users\\lucp9827\\Desktop\\Neutralise_end_Dash - Copy\\filtered_1%.RData")
filtered_results_0.01 = filter_type1(results,results_power,alpha=0.01)
save(filtered_results_0.01,file="C:\\Users\\lucp9827\\Desktop\\Neutralise_end_Dash - Copy\\filtered_1%.RData")
View(filter_significance)
View(filtered_results_0.01)
filtered_results_0.01[["filter_df"]]
View(filtered_results_0.01)
load("C:/Users/lucp9827/Desktop/Neutralise_end_Dash - Copy/filtered_10%.RData")
load("C:/Users/lucp9827/Desktop/Neutralise_end_Dash - Copy/filtered_1%.RData")
load("C:/Users/lucp9827/Desktop/Neutralise_end_Dash - Copy/filtered_5%.RData")
View(filtered_results_0.01)
filtered_results_0.01[["filter_df"]]
load("C:/Users/lucp9827/Desktop/Adaptive tests/Data/list_randomly_split_data.RData")
View(data_list)
shiny::runApp()
runApp()
View(sum_methods)
sum_methods())
sum_methods()
method.files<-dir(path=paste("Methods",sep=""))
load(paste("Results/neutralisestatus.RData",sep=""))
method.exists<-method.files%in%neutralise.status$file.name[
(neutralise.status$type=="method")&
(neutralise.status$check==TRUE)]
text=data.frame()
length(method.files)
i=1
filename_temp=method.files[i]
filename<-paste("Methods/",filename_temp,sep="")
con=file(filename,"r")
tmp<-readLines(con,n=-1)
close(con)
name_id = which(tmp=="# NAME")
name_txt = tmp[name_id+1]
name_txt = gsub('#','',name_txt)
hep_id = which(tmp=="# HYPOTHESIS")
hep_txt = tmp[hep_id+1]
hep_txt = gsub('#','',hep_txt)
des_id = which(tmp=="# DESCRIPTION")
des_txt = tmp[des_id+1]
des_txt = gsub('#','',des_txt)
ref_id = which(tmp=="# REFERENCES")
ref_txt = tmp[ref_id+1]
ref_txt = gsub('#','',ref_txt)
abbriv_txt=gsub('.R','',filename_temp)
text_tmp= data.frame(Abbriviation=abbriv_txt,Name=name_txt,Hypotheses=hep_txt,Description=des_txt,References=ref_txt)
text=rbind(text,text_tmp)
View(text)
runApp()
method.files<-dir(path=paste("Methods",sep=""))
load(paste("Results/neutralisestatus.RData",sep=""))
method.exists<-method.files%in%neutralise.status$file.name[
(neutralise.status$type=="method")&
(neutralise.status$check==TRUE)]
text=data.frame()
for (i in (1:length(method.files))){
filename_temp=method.files[i]
filename<-paste("Methods/",filename_temp,sep="")
con=file(filename,"r")
tmp<-readLines(con,n=-1)
close(con)
name_id = which(tmp=="# NAME")
name_txt = tmp[name_id+1]
name_txt = gsub('#','',name_txt)
hep_id = which(tmp=="# HYPOTHESIS")
hep_txt = tmp[hep_id+1]
hep_txt = gsub('#','',hep_txt)
des_id = which(tmp=="# DESCRIPTION")
des_txt = tmp[des_id+1]
des_txt = gsub('#','',des_txt)
ref_id = which(tmp=="# REFERENCES")
ref_txt = tmp[ref_id+1]
ref_txt = gsub('#','',ref_txt)
abbriv_txt=gsub('.R','',filename_temp)
text_tmp= data.frame(Abbriviation=abbriv_txt,Name=name_txt,Hypotheses=hep_txt,Description=des_txt,References=ref_txt)
text=rbind(text,text_tmp)
}
rbind(text,text_tmp)
View(text_tmp)
text_tmp= data.frame(Abbriviation=abbriv_txt,Name=name_txt,Hypotheses=hep_txt,Description=des_txt,References=ref_txt)
for (i in (1:length(method.files))){
filename_temp=method.files[i]
filename<-paste("Methods/",filename_temp,sep="")
con=file(filename,"r")
tmp<-readLines(con,n=-1)
close(con)
name_id = which(tmp=="# NAME")
name_txt = tmp[name_id+1]
name_txt = gsub('#','',name_txt)
hep_id = which(tmp=="# HYPOTHESIS")
hep_txt = tmp[hep_id+1]
hep_txt = gsub('#','',hep_txt)
des_id = which(tmp=="# DESCRIPTION")
des_txt = tmp[des_id+1]
des_txt = gsub('#','',des_txt)
ref_id = which(tmp=="# REFERENCES")
ref_txt = tmp[ref_id+1]
ref_txt = gsub('#','',ref_txt)
abbriv_txt=gsub('.R','',filename_temp)
text_tmp= data.frame(Abbriviation=abbriv_txt,Name=name_txt,Hypotheses=hep_txt,Description=des_txt,References=ref_txt)
text=rbind(text,text_tmp)
}
runApp()
