name=data.name,
type="setting",
check=TRUE,
to.run=TRUE,
neutralised=NA)
}
if(length(issues)>0) {
setting.name<-strsplit(setting,".R")[[1]]
write(issues,
file=paste(path,"/Issues/issues_",setting.name,".txt",sep=""))
neutralise.status<-neutralise.status%>%
add_row(file.name=paste(data.name,
"_settings_new.RData", sep=""),
name=data.name,
type="setting",
check=FALSE,
to.run=FALSE,
neutralised=NA)
}
check.settings.issues[[cnt]]<-issues
check.settings.result<-c(check.settings.result,
ifelse(length(issues)==0,TRUE,FALSE))
cnt<-cnt+1
}
}
if(sum(setting.exists)==0) {
check.settings.result<-0
}
save(neutralise.status,
file=paste(path,"/Results/NeutraliseStatus.RData",sep=""))
return(list(check.settings.issues=check.settings.issues,
check.settings.names=check.settings.names,
check.settings.result=check.settings.result))
}
test.settings<-Test_New_Setting(path)
(max(test.settings$check.settings.result)==1)
(is.null(Test)&is.null(Data.Generator)&is.null(settings))
# Add setting for the 'Normal data generator' in the  Settings directory
settings<-data.frame(
delta=c(0,0.5,1.5,2.5),
sd=c(1,3,3,3),
null=c(1,0,0,0)
)
# The setting will be saved in the Settings directory
save(settings,
file=paste(path,"/Settings/Normal_settings.R",sep=""))
# Run the Neutralise main function
res<-Neutralise(path, N=1)
settings<-data.frame(
delta=c(0,0.5,1.5,2.5),
sd=c(1,3,3,3),
null=c(1,0,0,0)
)
# The setting will be saved in the Settings directory
save(settings,
file=paste(path,"/Settings/Normal_settings.R",sep=""))
(is.null(Test)&is.null(Data.Generator)&is.null(settings))
(is.null(Test)&is.null(Data.Generator)&is.null(settings))
1+1
1+1
install.packages("shinydashboard")
library(shinydashboard)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
library(shiny)
runExample("01_hello")
library(shiny)
runExample("01_hello")
setwd('C:\\Users\\lucp9827\\Desktop\\Shiny')
runExample("01_hello")
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
x    <- faithful$waiting
bins <- seq(min(x), max(x))
bins
min(x)
max(x)
runExample("01_hello")
bins <- seq(min(x), max(x), length.out = 1+ 1)
runExample("01_hello")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runExample("01_hello")
runApp("App-1",display.mode = 'showcase')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runExample("02_text")
runExample("02_text")
runExample("06_tabsets")
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
> library(shiny)
library(shiny)
h1("My title")
library(shiny)
h5("My title")
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
runApp('C:/Users/lucp9827/Desktop/Shiny/App-1')
counties <- readRDS("census-app/data/counties.rds")
install.packages(c("maps", "mapproj"))
setwd('C:\\Users\\lucp9827\\Desktop\\Shiny')
library(maps)
library(mapproj)
source("census-app/helpers.R")
library(maps)
library(mapproj)
source("C:\\Users\\lucp9827\\Desktop\\Shiny\\census-app/helpers.R")
counties <- readRDS("C:\\Users\\lucp9827\\Desktop\\Shiny\\census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
View(percent_map)
View(counties)
runApp('C:/Users/lucp9827/Desktop/Shiny/census-app')
runApp('C:/Users/lucp9827/Desktop/Shiny/census-app')
runApp('C:/Users/lucp9827/Desktop/Shiny/census-app')
View(counties)
runApp('C:/Users/lucp9827/Desktop/Shiny/census-app')
runApp('C:/Users/lucp9827/Desktop/Shiny/census-app')
runApp("stockVis")
runApp("C:\\Users\\lucp9827\\Desktop\\Shiny\\stockVis")
install.packages("quantmod")
runApp("C:\\Users\\lucp9827\\Desktop\\Shiny\\stockVis")
runApp('C:/Users/lucp9827/Desktop/Shiny/stockVis')
remotes::install_github("tpepler/nonpar")
install.packages("DescTools")
install.packages("Bolstad2")
install.packages("Bolstad")
install.packages("msBP")
shiny::runApp('C:/Users/lucp9827/Desktop/Shiny/neutralise')
runApp('C:/Users/lucp9827/Desktop/Shiny/neutralise')
load(file = "data\\NeutraliseStatus.RData")
load(file = "data\\NeutraliseStatus.RData")
load("C:/Users/lucp9827/Desktop/Shiny/neutralise/data/NeutraliseStatus.RData")
View(neutralise.status)
neutralise.status=neutralise.status[-27,]
save(neutralise.status,file="C:/Users/lucp9827/Desktop/Shiny/neutralise/data/NeutraliseStatus.RData")
runApp('C:/Users/lucp9827/Desktop/Shiny/neutralise')
runApp('C:/Users/lucp9827/Desktop/Shiny/neutralise')
finished<-read.csv("data/Finished.txt",sep=",",header=T)
finished<-read.csv("C:\\Users\\lucp9827\\Desktop\\Shiny\\neutralise\\data/Finished.txt",sep=",",header=T)
View(finished)
finished=finished[-c(67,68),]
save(finished,file="C:\\Users\\lucp9827\\Desktop\\Shiny\\neutralise\\data/Finished.txt")
finished<-read.csv("C:\\Users\\lucp9827\\Desktop\\Shiny\\neutralise\\data/Finished.txt",sep=",",header=T)
View(finished)
runApp('C:/Users/lucp9827/Desktop/Shiny/neutralise')
source("help.R")
load(file = "data\\NeutraliseStatus.RData")
setwd("C:/Users/lucp9827/Desktop/Shiny/neutralise")
source("help.R")
load(file = "data\\NeutraliseStatus.RData")
names_methods=(All_Neutralised(neutralise.status))
names_data_scenarios = All_Neutralised(neutralise.status,type='data')
names_data=c(All_Neutralised(neutralise.status,type='data'),"General")
method1=methods[1]
method1=names_methods[1]
methods2=names_methods[2]
data=NULL
alpha=0.05
add.to.plot=NULL
group=FALSE
CI=FALSE
# Save data generation methods ran per specified method
data1<-finished$data[finished$method==method1]
# Read finished file
finished<-read.csv("data/Finished.txt",sep=",",header=T)
data1<-finished$data[finished$method==method1]
data2<-finished$data[finished$method==method2]
method2=methods2
data1<-finished$data[finished$method==method1]
data2<-finished$data[finished$method==method2]
data.i<-intersect(data1,data2)
results1<-list()
results2<-list()
win2<-0
cnt.scenarios<-0
cnt<-1
pwr1<-data.frame()
pwr2<-data.frame()
text_group=c()
data.gen<-c()
d=data.i[1]
dir1<-dir(paste("data/SimRes_",method1,"_",d,sep=""))
dir2<-dir(paste("data/SimRes_",method2,"_",d,sep=""))
file1<-paste("data/SimRes_",method1,"_",d,
"/",dir1[grepl(".RData",dir1)&grepl(method1,dir1)],
sep="")
file2<-paste("data/SimRes_",method2,"_",d,
"/",dir2[grepl(".RData",dir2)&grepl(method2,dir2)],
sep="")
load(file1)
View(results)
data="Normal"
(!is.null(data))
results<-results[results$distribution==data,]
View(results)
View(results)
df=data.frame(sd=3)
colnames(df)=c('sd')
par.fix=df
names(par.fix)
colnames(df)=c(sd)
par.fix=df
names(par.fix)
View(df)
colnames(df)=c('sd')
par.fix=df
View(par.fix)
results%>%dplyr::select(names(par.fix))
runApp()
runApp()
runApp()
load("C:/Users/lucp9827/Desktop/Shiny/neutralise/data/SimRes_AD_Cauchy/AD_Cauchy.RData")
df=data.frame(sd1=1)
View(results)
df=data.frame(scale1=0.5)
View(results)
View(df)
results%>%dplyr::select(names(par.fix))
par.fix=df
results%>%dplyr::select(names(par.fix))
df=data.frame('scale1'=0.5)
View(df)
View(df)
par.fix=df
results%>%dplyr::select(names(par.fix))
df=data.frame("scale1"=0.5)
View(df)
load("C:/Users/lucp9827/Desktop/Shiny/neutralise/data/SimRes_AD_Cauchy/AD_Cauchy.RData")
par.fix=df
results%>%dplyr::select(names(par.fix))
runApp()
load("C:/Users/lucp9827/Desktop/Shiny/neutralise/data/SimRes_AD_Cauchy/AD_Cauchy.txt")
load("C:/Users/lucp9827/Desktop/Shiny/neutralise/data/SimRes_AD_Logistic/settings.RData")
View(settings)
Power_QQ("AD","KS",data="Logistic",par.fix=data.frame(sd=3))
Power_QQ("AD","KS",data="Logistic",par.fix=data.frame(sd=1))
Power_QQ("AD","KS",data="Logistic",par.fix=data.frame(delta=1))
runApp()
runApp()
runApp()
load(file = "data\\NeutraliseStatus.RData")
data.i<-neutralise.status[neutralise.status$type=='data'&neutralise.status$to.run==FALSE,'name']
runApp()
finished<-read.csv("data/Finished.txt",sep=",",header=T)
load(file = "data\\NeutraliseStatus.RData")
source("help.R")
methods<- (All_Neutralised(neutralise.status))
method="AD"
end=data.frame()
results1<-list()
cnt<-1
data<-finished$data[finished$method==method]
cnt.scenarios<-0
pwr<-c()
distr<-c()
n<-c()
for(d in data) {
dir1<-dir(paste("data/SimRes_",method,"_",d,sep=""))
file1<-paste("data/SimRes_",method,"_",d,
"/",dir1[grepl(".RData",dir1)&grepl(method,dir1)],
sep="")
load(file1)
results=cbind(results,id=rep(1:nrow(results)))
results1[[d]]<-rbind(results1[[d]],results)
cnt<-cnt+1
}
View(results1)
View(results1)
end=data.frame()
results1<-list()
cnt<-1
for (method in methods){
data<-finished$data[finished$method==method]
cnt.scenarios<-0
pwr<-c()
distr<-c()
n<-c()
for(d in data) {
dir1<-dir(paste("data/SimRes_",method,"_",d,sep=""))
file1<-paste("data/SimRes_",method,"_",d,
"/",dir1[grepl(".RData",dir1)&grepl(method,dir1)],
sep="")
load(file1)
results=cbind(results,id=rep(1:nrow(results)))
results1[[d]]<-rbind(results1[[d]],results)
cnt<-cnt+1
}
}
View(results1)
unique(results1[["Normal"]][["method"]])
save(results1,file="data\\Results.RData")
load("data/Results.RData")
setwd("C:/Users/lucp9827/Desktop/Shiny/neutralise")
load("data/Results.RData")
load("C:/Users/lucp9827/Desktop/Shiny/neutralise/data/Results.RData")
length(results1)
results_power=list()
for (i in (1:length(results1))){
results_power[[i]]=results1[[i]][results1[[i]]$null!=1,]
}
View(results_power)
View(results1)
remove(results1)
View(results_power)
power_dataframe=data.frame()
for (i in (1:length(results_power))){
power_dataframe_tmp=data.frame(method=results_power[[i]]$method,distribution=results_power[[i]]$distribution,id=results_power[[i]]$id,power0.01=results_power[[i]]$power0.01,power0.05=results_power[[i]]$power0.05,power0.10=results_power[[i]]$power0.10)
power_dataframe=rbind(power_dataframe,power_dataframe_tmp)
}
View(power_dataframe)
View(power_dataframe)
power_dataframe$scenario <- paste(power_dataframe$distribution,power_dataframe$id)
View(power_dataframe)
power_dataframe=remove_missing(power_dataframe)
View(power_dataframe)
mat_0.05=xtabs(power0.05~method+scenario)
View(power_dataframe)
mat_0.05=xtabs(power0.05~method+scenario,power_dataframe)
mat_0.01=xtabs(power0.01~method+scenario,power_dataframe)
mat_0.10=xtabs(power0.10~method+scenario,power_dataframe)
mat_0.05
plot(mat_0.05)
distance_matrix=dist(mat_0.05,method="euclidean",diag = TRUE)
distance_matrix
heatmap(as.matrix(distance_matrix))
distance_matrix=dist(mat_0.05,method="canberra",diag = TRUE)
heatmap(as.matrix(distance_matrix))
distance_matrix=dist(t(mat_0.05),method="canberra",diag = TRUE)
heatmap(as.matrix(distance_matrix))
distance_matrix=dist(t(mat_0.05),method="euclidian",diag = TRUE)
heatmap(as.matrix(distance_matrix))
heatmap(as.matrix(distance_matrix))
distance_matrix=dist(mat_0.05,method="euclidian",diag = TRUE)
heatmap(as.matrix(distance_matrix))
distance_matrix=dist(mat_0.05,method="euclidian")
heatmap(as.matrix(distance_matrix))
heatmap(as.matrix(distance_matrix),scale=none)
heatmap(as.matrix(distance_matrix),scale='none')
eg3.hclust <- hclust(distance_matrix, method = "ward.D2")
plot(eg3.hclust, hang = -1)
result=prcomp(test1_distance_matrix,scale=FALSE)
result=prcomp(distance_matrix,scale=FALSE)
result$rotation <- -1*result$rotation
result$rotation
result$x <- -1*result$x
biplot(result, scale = 0)
(result$sdev^2 / sum(result$sdev^2))*100
var_explained = result$sdev^2 / sum(result$sdev^2)
#create scree plot
qplot(c(1:15), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
runApp()
alpha=0.05
(alpha==0.05)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dir(path=paste(path,"/Methods",sep=""))
runApp()
runApp()
dir(path=paste("Methods",sep=""))
method.files<-dir(path=paste("Methods",sep=""))
load(paste("/Results/NeutraliseStatus.RData",sep=""))
load(paste("Results/NeutraliseStatus.RData",sep=""))
View(neutralise.status)
neutralise.status$file.name[
(neutralise.status$type=="method")&
(neutralise.status$check==TRUE)]
method.files%in%neutralise.status$file.name[
(neutralise.status$type=="method")&
(neutralise.status$check==TRUE)]
filename=method.files[1]
con=file(filename,"r")
dir(path=paste("Methods",sep=""))
filename<-paste("/Methods/",filename_temp,sep="")
filename_temp=method.files[1]
filename<-paste("Methods/",filename_temp,sep="")
con=file(filename,"r")
con
tmp<-readLines(con,n=-1)
close(con)
tmp
(tmp=="# NAME")
which(tmp=="# NAME")
name_id = which(tmp=="# NAME")
name_txt = tmp[name_id+1]
des_id = which(tmp=="# DESCRIPTION")
des_txt = tmp[des_id+1]
ref_id = which(tmp=="# REFERENCE")
ref_txt = tmp[ref_id+1]
table(name_txt,des_txt,ref_txt)
c(name_txt,des_txt,ref_txt)
which(tmp=="# REFERENCE")
ref_id = which(tmp=="# REFERENCES")
ref_txt = tmp[ref_id+1]
c(name_txt,des_txt,ref_txt)
text= c(name_txt,des_txt,ref_txt)
text
text= data.frame(name=name_txt,description=des_txt,references=ref_txt)
View(text)
text= data.frame(name=name_txt,description=des_txt,references=ref_txt)
gsub('#','',name_txt)
length(method.files)
method.files<-dir(path=paste("Methods",sep=""))
load(paste("Results/NeutraliseStatus.RData",sep=""))
method.exists<-method.files%in%neutralise.status$file.name[
(neutralise.status$type=="method")&
(neutralise.status$check==TRUE)]
text=data.frame()
for (i in (1:length(method.files))){
filename_temp=method.files[i]
filename<-paste("Methods/",filename_temp,sep="")
con=file(filename,"r")
tmp<-readLines(con,n=-1)
close(con)
name_id = which(tmp=="# NAME")
name_txt = tmp[name_id+1]
name_txt = gsub('#','',name_txt)
des_id = which(tmp=="# DESCRIPTION")
des_txt = tmp[des_id+1]
des_txt = gsub('#','',des_txt)
ref_id = which(tmp=="# REFERENCES")
ref_txt = tmp[ref_id+1]
ref_txt = gsub('#','',ref_txt)
text_tmp= data.frame(name=name_txt,description=des_txt,references=ref_txt)
text=rbind(text,text_tmp)
}
View(text)
runApp()
runApp()
runApp()
runApp()
runApp()
